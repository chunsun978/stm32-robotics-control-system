name: Code Quality

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all \
                 --inconclusive \
                 --suppress=missingIncludeSystem \
                 --suppress=unmatchedSuppression \
                 --suppress=unusedFunction \
                 --inline-suppr \
                 --std=c++17 \
                 --language=c++ \
                 --platform=unix32 \
                 --error-exitcode=0 \
                 --xml \
                 --output-file=cppcheck-report.xml \
                 Core/Src/modules/ Core/Inc/modules/ 2>&1 || true
        
        # Generate human-readable report
        if [ -f cppcheck-report.xml ]; then
          echo "## Static Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          ERRORS=$(grep -c 'severity="error"' cppcheck-report.xml || echo "0")
          WARNINGS=$(grep -c 'severity="warning"' cppcheck-report.xml || echo "0")
          STYLE=$(grep -c 'severity="style"' cppcheck-report.xml || echo "0")
          echo "- Errors: ${ERRORS}" >> $GITHUB_STEP_SUMMARY
          echo "- Warnings: ${WARNINGS}" >> $GITHUB_STEP_SUMMARY
          echo "- Style issues: ${STYLE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$ERRORS" -eq "0" ] && [ "$WARNINGS" -eq "0" ]; then
            echo "✅ **No critical issues found!**" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Upload cppcheck report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml
        retention-days: 30
    
    - name: Check code formatting
      run: |
        echo "## Code Formatting Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any C++ files need formatting
        FORMAT_NEEDED=0
        for file in $(find Core/Src/modules Core/Inc/modules -name "*.cpp" -o -name "*.hpp"); do
          clang-format --dry-run --Werror $file 2>&1 || FORMAT_NEEDED=1
        done
        
        if [ $FORMAT_NEEDED -eq 0 ]; then
          echo "✅ All C++ files are properly formatted" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some files may need formatting" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run \`clang-format -i Core/Src/modules/**/*.cpp Core/Inc/modules/**/*.hpp\` to fix" >> $GITHUB_STEP_SUMMARY
        fi
  
  complexity-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install lizard
      run: |
        pip install lizard
    
    - name: Run complexity analysis
      run: |
        lizard -l cpp -w -o lizard-report.txt Core/Src/modules/ Core/Inc/modules/ || true
        
        echo "## Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat lizard-report.txt | head -20 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: lizard-report.txt
        retention-days: 30
  
  line-count:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Count lines of code
      run: |
        echo "## Lines of Code" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### C++ Code" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        find Core/Src/modules Core/Inc/modules -name "*.cpp" -o -name "*.hpp" | xargs wc -l | tail -1 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### All Source Files" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        find Core -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs wc -l | tail -1 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
